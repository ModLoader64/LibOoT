//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Intrinsics.Arm;

namespace ModLoader.OoT.API
{


    public class WrapperInventory
    {

        [System.Text.Json.Serialization.JsonIgnoreAttribute()]
        private u32 pointer;

        public u8[] items { get => this._items(); set => this._items(value); }//;

        public s8[] ammo { get => this._ammo(); set => this._ammo(value); }//;

        public u16 equipment { get => this._equipment(); set => this._equipment(value); }//;

        public u32 upgrades { get => this._upgrades(); set => this._upgrades(value); }//;

        public u32 questItems { get => this._questItems(); set => this._questItems(value); }//;

        public u8[] dungeonItems { get => this._dungeonItems(); set => this._dungeonItems(value); }//;

        public s8[] dungeonKeys { get => this._dungeonKeys(); set => this._dungeonKeys(value); }//;

        public s8 defenseHearts { get => this._defenseHearts(); set => this._defenseHearts(value); }//;

        public s16 gsTokens { get => this._gsTokens(); set => this._gsTokens(value); }//;

        // Inventory Items
        public bool dekuSticks { get => (this.getItemInSlot(InventorySlots.DEKU_STICKS) == InventoryItem.DEKU_STICKS); set => this._dekuSticks(value); }
        public bool dekuNuts { get => (this.getItemInSlot(InventorySlots.DEKU_NUTS) == InventoryItem.DEKU_NUTS); set => this._dekuNuts(value); }
        public bool bombs { get => (this.getItemInSlot(InventorySlots.BOMBS) == InventoryItem.BOMBS); set => this._bombs(value); }
        public bool bow { get => (this.getItemInSlot(InventorySlots.FAIRY_BOW) == InventoryItem.FAIRY_BOW); set => this._bow(value); }
        public bool fireArrows { get => (this.getItemInSlot(InventorySlots.FIRE_ARROWS) == InventoryItem.FIRE_ARROWS); set => this._fireArrows(value); }
        public bool dinsFire { get => (this.getItemInSlot(InventorySlots.DINS_FIRE) == InventoryItem.DINS_FIRE); set => this._dinsFire(value); }
        public bool slingshot { get => (this.getItemInSlot(InventorySlots.FAIRY_SLINGSHOT) == InventoryItem.FAIRY_SLINGSHOT); set => this._slingshot(value); }
        public InventoryItem ocarina { get => this._ocarina(); set => this._ocarina(value); }
        public bool bombchus { get => (this.getItemInSlot(InventorySlots.BOMBCHUS) == InventoryItem.BOMBCHUS); set => this._bombchus(value); }
        public InventoryItem hookshot { get => this._hookshot(); set => this._hookshot(value); }
        public bool iceArrows { get => (this.getItemInSlot(InventorySlots.ICE_ARROWS) == InventoryItem.ICE_ARROWS); set => this._iceArrows(value); }
        public bool faroresWind { get => (this.getItemInSlot(InventorySlots.FARORES_WIND) == InventoryItem.FARORES_WIND); set => this._faroresWind(value); }
        public bool boomerang { get => (this.getItemInSlot(InventorySlots.BOOMERANG) == InventoryItem.BOOMERANG); set => this._boomerang(value); }
        public bool lensOfTruth { get => (this.getItemInSlot(InventorySlots.LENS_OF_TRUTH) == InventoryItem.LENS_OF_TRUTH); set => this._lensOfTruth(value); }
        public bool magicBeans { get => (this.getItemInSlot(InventorySlots.MAGIC_BEANS) == InventoryItem.MAGIC_BEANS); set => this._magicBeans(value); }
        public bool megatonHammer { get => (this.getItemInSlot(InventorySlots.MEGATON_HAMMER) == InventoryItem.MEGATON_HAMMER); set => this._megatonHammer(value); }
        public bool lightArrows { get => (this.getItemInSlot(InventorySlots.LIGHT_ARROWS) == InventoryItem.LIGHT_ARROWS); set => this._lightArrows(value); }
        public bool nayrusLove { get => (this.getItemInSlot(InventorySlots.NAYRUS_LOVE) == InventoryItem.NAYRUS_LOVE); set => this._nayrusLove(value); }
/*      public bool bottle1 { get => this._bottle1(); set => this._bottle1(value); }
        public bool bottle2 { get => this._bottle2(); set => this._bottle2(value); }
        public bool bottle3 { get => this._bottle3(); set => this._bottle3(value); }
        public bool bottle4 { get => this._bottle4(); set => this._bottle4(value); }
        public bool adultTradeItem { get => this._adultTradeItem(); set => this._adultTradeItem(value); }
        public bool childTradeItem { get => this._childTradeItem(); set => this._childTradeItem(value); }*/


        public InventoryItem getItemInSlot(InventorySlots slot, InventoryItem[] whitelist = null)
        {
            InventoryItem item = (InventoryItem)Memory.RAM.ReadU8(this.pointer + (byte)slot);
            if (whitelist == null) return item;
            else if (whitelist.Contains(item))
            {
                return item;
            }
            else return InventoryItem.NONE;

        }
        public void setItemInSlot(InventorySlots slot, InventoryItem item, InventoryItem[] whitelist = null)
        {
            if (whitelist == null) Memory.RAM.WriteU8(this.pointer + (byte)slot, (byte)item);

            else if (whitelist.Contains(item))
            {
                Memory.RAM.WriteU8(this.pointer + (byte)slot, (byte)item);
            }
        }

        public WrapperInventory(u32 pointer)
        {
            this.pointer = pointer;
        }

        public static uint getSize()
        {
            return 0x5E;
        }

        // #ARRCOUNT 24
        private u8[] _items()
        {
            u8[] bytes = new u8[24]; for (u32 i = 0; i < 24; i++) { bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x00 + (i * 1)); }
            return bytes;
        }

        private void _items(u8[] value)
        {
            for (u32 i = 0; i < 24; i++) { Memory.RAM.WriteU8(this.pointer + 0x00 + (i * 1), value[i]); }
        }

        // #ARRCOUNT 16
        private s8[] _ammo()
        {
            s8[] bytes = new s8[16]; for (u32 i = 0; i < 16; i++) { bytes[i] = Memory.RAM.ReadS8(this.pointer + 0x18 + (i * 1)); }
            return bytes;
        }

        private void _ammo(s8[] value)
        {
            for (u32 i = 0; i < 16; i++) { Memory.RAM.WriteS8(this.pointer + 0x18 + (i * 1), value[i]); }
        }

        private u16 _equipment()
        {
            return Memory.RAM.ReadU16(this.pointer + 0x28);
        }

        private void _equipment(u16 value)
        {
            Memory.RAM.WriteU16(this.pointer + 0x28, value);
        }

        private u32 _upgrades()
        {
            return Memory.RAM.ReadU32(this.pointer + 0x2C);
        }

        private void _upgrades(u32 value)
        {
            Memory.RAM.WriteU32(this.pointer + 0x2C, value);
        }

        private u32 _questItems()
        {
            return Memory.RAM.ReadU32(this.pointer + 0x30);
        }

        private void _questItems(u32 value)
        {
            Memory.RAM.WriteU32(this.pointer + 0x30, value);
        }

        // #ARRCOUNT 20
        private u8[] _dungeonItems()
        {
            u8[] bytes = new u8[20]; for (u32 i = 0; i < 20; i++) { bytes[i] = Memory.RAM.ReadU8(this.pointer + 0x34 + (i * 1)); }
            return bytes;
        }

        private void _dungeonItems(u8[] value)
        {
            for (u32 i = 0; i < 20; i++) { Memory.RAM.WriteU8(this.pointer + 0x34 + (i * 1), value[i]); }
        }

        // #ARRCOUNT 19
        private s8[] _dungeonKeys()
        {
            s8[] bytes = new s8[19]; for (u32 i = 0; i < 19; i++) { bytes[i] = Memory.RAM.ReadS8(this.pointer + 0x48 + (i * 1)); }
            return bytes;
        }

        private void _dungeonKeys(s8[] value)
        {
            for (u32 i = 0; i < 19; i++) { Memory.RAM.WriteS8(this.pointer + 0x48 + (i * 1), value[i]); }
        }

        private s8 _defenseHearts()
        {
            return Memory.RAM.ReadS8(this.pointer + 0x5B);
        }

        private void _defenseHearts(s8 value)
        {
            Memory.RAM.WriteS8(this.pointer + 0x5B, value);
        }

        private s16 _gsTokens()
        {
            return Memory.RAM.ReadS16(this.pointer + 0x5C);
        }

        private void _gsTokens(s16 value)
        {
            Memory.RAM.WriteS16(this.pointer + 0x5C, value);
        }

        // Inventory Items 
/*        private bool _dekuSticks()
        {
            InventoryItem[] whitelist = { InventoryItem.DEKU_STICKS };
            return getItemInSlot(InventorySlots.DEKU_STICKS, whitelist) != InventoryItem.DEKU_STICKS;
        }*/
        private void _dekuSticks(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.DEKU_STICKS, InventoryItem.DEKU_STICKS);
            else setItemInSlot(InventorySlots.DEKU_STICKS, InventoryItem.NONE);
        }

/*        private bool _dekuNuts()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DEKU_NUTS) == (byte)InventoryItem.DEKU_NUTS;
        }*/
        private void _dekuNuts(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.DEKU_NUTS, InventoryItem.DEKU_NUTS);
            else setItemInSlot(InventorySlots.DEKU_NUTS, InventoryItem.NONE);
        }

/*        private bool _bombs()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.BOMBS) == (byte)InventoryItem.DEKU_STICKS;
        }*/
        private void _bombs(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.BOMBS, InventoryItem.BOMBS);
            else setItemInSlot(InventorySlots.BOMBS, InventoryItem.NONE);
        }

/*        private bool _bow()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.FAIRY_BOW) == (byte)InventoryItem.FAIRY_BOW;
        }*/
        private void _bow(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.FAIRY_BOW, InventoryItem.FAIRY_BOW);
            else setItemInSlot(InventorySlots.FAIRY_BOW, InventoryItem.NONE);
        }

/*        private bool _fireArrows()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.FIRE_ARROWS) == (byte)InventoryItem.FIRE_ARROWS;
        }*/
        private void _fireArrows(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.FIRE_ARROWS, InventoryItem.FIRE_ARROWS);
            else setItemInSlot(InventorySlots.FIRE_ARROWS, InventoryItem.NONE);
        }
/*
        private bool _dinsFire()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DINS_FIRE) == (byte)InventoryItem.DINS_FIRE;
        }*/
        private void _dinsFire(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.DINS_FIRE, InventoryItem.DINS_FIRE);
            else setItemInSlot(InventorySlots.DINS_FIRE, InventoryItem.NONE);
        }

/*        private bool _slingshot()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.FAIRY_SLINGSHOT) == (byte)InventoryItem.FAIRY_SLINGSHOT;
        }*/
        private void _slingshot(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.FAIRY_SLINGSHOT, InventoryItem.FAIRY_SLINGSHOT);
            else setItemInSlot(InventorySlots.FAIRY_SLINGSHOT, InventoryItem.NONE);
        }

        private InventoryItem _ocarina()
        {
            return (InventoryItem)(Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.OCARINA));
        }
        private void _ocarina(InventoryItem value)
        {
            if (value == InventoryItem.OCARINA_OF_TIME) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.OCARINA, (byte)InventoryItem.OCARINA_OF_TIME);
            else if (value == InventoryItem.FAIRY_OCARINA) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.FAIRY_OCARINA);
            else if (value == InventoryItem.NONE) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.OCARINA, (byte)(InventoryItem.NONE));
        }

/*        private bool _bombchus()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.BOMBCHUS) == (byte)InventoryItem.BOMBCHUS;
        }*/
        private void _bombchus(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.BOMBCHUS, InventoryItem.BOMBCHUS);
            else setItemInSlot(InventorySlots.BOMBCHUS, InventoryItem.NONE);
        }

        private InventoryItem _hookshot()
        {
            return (InventoryItem)(Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.HOOKSHOT));
        }
        private void _hookshot(InventoryItem value)
        {
            if (value == InventoryItem.LONGSHOT) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.HOOKSHOT, (byte)InventoryItem.LONGSHOT);
            else if (value == InventoryItem.HOOKSHOT) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.HOOKSHOT, (byte)InventoryItem.HOOKSHOT);
            else if (value == InventoryItem.NONE) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.HOOKSHOT, (byte)(InventoryItem.NONE));
        }

        /*private bool _iceArrows()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.ICE_ARROWS) == (byte)InventoryItem.ICE_ARROWS;
        }*/
        private void _iceArrows(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.ICE_ARROWS, InventoryItem.ICE_ARROWS);
            else setItemInSlot(InventorySlots.ICE_ARROWS, InventoryItem.NONE);
        }

/*        private bool _faroresWind()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.FARORES_WIND) == (byte)InventoryItem.FARORES_WIND;
        }*/
        private void _faroresWind(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.FARORES_WIND, InventoryItem.FARORES_WIND);
            else setItemInSlot(InventorySlots.FARORES_WIND, InventoryItem.NONE);
        }

/*        private bool _boomerang()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.BOOMERANG) == (byte)InventoryItem.BOOMERANG;
        }*/
        private void _boomerang(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.BOOMERANG, InventoryItem.BOOMERANG);
            else setItemInSlot(InventorySlots.BOOMERANG, InventoryItem.NONE);
        }

/*        private bool _lensOfTruth()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.LENS_OF_TRUTH) == (byte)InventoryItem.LENS_OF_TRUTH;
        }*/
        private void _lensOfTruth(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.LENS_OF_TRUTH, InventoryItem.LENS_OF_TRUTH);
            else setItemInSlot(InventorySlots.LENS_OF_TRUTH, InventoryItem.NONE);
        }

/*        private bool _magicBeans()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.MAGIC_BEANS) == (byte)InventoryItem.MAGIC_BEANS;
        }*/
        private void _magicBeans(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.MAGIC_BEANS, InventoryItem.MAGIC_BEANS);
            else setItemInSlot(InventorySlots.MAGIC_BEANS, InventoryItem.NONE);
        }

/*        private bool _megatonHammer()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.MEGATON_HAMMER) == (byte)InventoryItem.MEGATON_HAMMER;
        }*/
        private void _megatonHammer(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.MEGATON_HAMMER, InventoryItem.MEGATON_HAMMER);
            else setItemInSlot(InventorySlots.MEGATON_HAMMER, InventoryItem.NONE);
        }

/*        private bool _lightArrows()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.LIGHT_ARROWS) == (byte)InventoryItem.LIGHT_ARROWS;
        }*/
        private void _lightArrows(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.LIGHT_ARROWS, InventoryItem.LIGHT_ARROWS);
            else setItemInSlot(InventorySlots.LIGHT_ARROWS, InventoryItem.NONE);
        }

/*        private bool _nayrusLove()
        {
            return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.NAYRUS_LOVE) == (byte)InventoryItem.NAYRUS_LOVE;
        }*/
        private void _nayrusLove(bool flag)
        {
            if (flag) setItemInSlot(InventorySlots.NAYRUS_LOVE, InventoryItem.NAYRUS_LOVE);
            else setItemInSlot(InventorySlots.NAYRUS_LOVE, InventoryItem.NONE);
        }

        /*


                private bool _bottle1()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.BOTTLE1) == (byte)InventoryItem.BOTTLE1;
                }

                private void _bottle1(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.BOTTLE1, (byte)InventoryItem.BOTTLE1);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.BOTTLE1, (byte)InventoryItem.NONE);
                }
                private bool _bottle2()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.BOTTLE2) == (byte)InventoryItem.BOTTLE2;
                }

                private void _bottle2(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.BOTTLE2, (byte)InventoryItem.BOTTLE2);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.BOTTLE2, (byte)InventoryItem.NONE);
                }
                private bool _bottle3()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DEKU_STICKS) == (byte)InventoryItem.DEKU_STICK;
                }

                private void _bottle3(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.DEKU_STICK);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.NONE);
                }
                private bool _bottle4()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DEKU_STICKS) == (byte)InventoryItem.DEKU_STICK;
                }

                private void _bottle4(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.DEKU_STICK);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.NONE);
                }
                private bool _adultTradeItem()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DEKU_STICKS) == (byte)InventoryItem.DEKU_STICK;
                }

                private void _adultTradeItem(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.DEKU_STICK);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.NONE);
                }
                private bool _childTradeItem()
                {
                    return Memory.RAM.ReadU8(this.pointer + (byte)InventorySlots.DEKU_STICKS) == (byte)InventoryItem.DEKU_STICK;
                }

                private void _childTradeItem(bool flag)
                {
                    if (flag) Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.DEKU_STICK);
                    else Memory.RAM.WriteU8(this.pointer + (byte)InventorySlots.DEKU_STICKS, (byte)InventoryItem.NONE);
                }*/
    }
}
